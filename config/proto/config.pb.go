// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: github.com/google/cloudprober/config/proto/config.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	proto5 "github.com/google/cloudprober/common/tlsconfig/proto"
	proto1 "github.com/google/cloudprober/probes/proto"
	proto4 "github.com/google/cloudprober/rds/server/proto"
	proto3 "github.com/google/cloudprober/servers/proto"
	proto2 "github.com/google/cloudprober/surfacers/proto"
	proto7 "github.com/google/cloudprober/targets/proto"
	proto6 "github.com/google/cloudprober/targets/rtc/rtcreporter/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProberConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probes to run.
	Probe []*proto1.ProbeDef `protobuf:"bytes,1,rep,name=probe" json:"probe,omitempty"`
	// Surfacers are used to export probe results for further processing.
	// If no surfacer is configured, a prometheus and a file surfacer are
	// initialized:
	//  - Prometheus makes probe results available at http://<host>:9313/metrics.
	//  - File surfacer writes results to stdout.
	//
	// You can disable default surfacers (in case you want no surfacer at all), by
	// adding the following to your config:
	//   surfacer {}
	Surfacer []*proto2.SurfacerDef `protobuf:"bytes,2,rep,name=surfacer" json:"surfacer,omitempty"`
	// Servers to run inside cloudprober. These servers can serve as targets for
	// other probes.
	Server []*proto3.ServerDef `protobuf:"bytes,3,rep,name=server" json:"server,omitempty"`
	// Shared targets allow you to re-use the same targets copy across multiple
	// probes. Example usage:
	//
	// shared_targets {
	//   name: "internal-vms"
	//   targets {
	//     rds_targets {
	//       ..
	//     }
	//   }
	// }
	//
	// probe {
	//   name: "vm-ping"
	//   type: PING
	//   targets {
	//     shared_targets: "internal-vms"
	//   }
	// }
	//
	// probe {
	//   name: "vm-http"
	//   type: HTTP
	//   targets {
	//     shared_targets: "internal-vms"
	//   }
	// }
	SharedTargets []*SharedTargets `protobuf:"bytes,4,rep,name=shared_targets,json=sharedTargets" json:"shared_targets,omitempty"`
	// Resource discovery server
	RdsServer *proto4.ServerConf `protobuf:"bytes,95,opt,name=rds_server,json=rdsServer" json:"rds_server,omitempty"`
	// Port for the default HTTP server. This port is also used for prometheus
	// exporter (URL /metrics). Default port is 9313. If not specified in the
	// config, default port can be overridden by the environment variable
	// CLOUDPROBER_PORT.
	Port *int32 `protobuf:"varint,96,opt,name=port" json:"port,omitempty"`
	// Port to run the default gRPC server on. If not specified, and if
	// environment variable CLOUDPROBER_GRPC_PORT is set, CLOUDPROBER_GRPC_PORT is
	// used for the default gRPC server. If CLOUDPROBER_GRPC_PORT is not set as
	// well, default gRPC server is not started.
	GrpcPort *int32 `protobuf:"varint,104,opt,name=grpc_port,json=grpcPort" json:"grpc_port,omitempty"`
	// TLS config, it can be used to:
	// - Specify client's CA cert for client cert verification:
	//     tls_config {
	//       ca_cert_file: "...."
	//     }
	//
	// - Specify TLS cert and key:
	//     tls_config {
	//       tls_cert_file: "..."
	//       tls_key_file: "..."
	//     }
	GrpcTlsConfig *proto5.TLSConfig `protobuf:"bytes,105,opt,name=grpc_tls_config,json=grpcTlsConfig" json:"grpc_tls_config,omitempty"`
	// Host for the default HTTP server. Default listens on all addresses. If not
	// specified in the config, default port can be overridden by the environment
	// variable CLOUDPROBER_HOST.
	Host *string `protobuf:"bytes,101,opt,name=host" json:"host,omitempty"`
	// Probes are staggered across time to avoid executing all of them at the
	// same time. This behavior can be disabled by setting the following option
	// to true.
	DisableJitter *bool `protobuf:"varint,102,opt,name=disable_jitter,json=disableJitter,def=0" json:"disable_jitter,omitempty"`
	// How often to export system variables. To learn more about system variables:
	// http://godoc.org/github.com/google/cloudprober/sysvars.
	SysvarsIntervalMsec *int32 `protobuf:"varint,97,opt,name=sysvars_interval_msec,json=sysvarsIntervalMsec,def=10000" json:"sysvars_interval_msec,omitempty"`
	// Variables specified in this environment variable are exported as it is.
	// This is specifically useful to export information about system environment,
	// for example, docker image tag/digest-id, OS version etc. See
	// tools/cloudprober_startup.sh in the cloudprober directory for an example on
	// how to use these variables.
	SysvarsEnvVar *string `protobuf:"bytes,98,opt,name=sysvars_env_var,json=sysvarsEnvVar,def=SYSVARS" json:"sysvars_env_var,omitempty"`
	// Options for RTC reporter. RTC reporter reports information about the
	// current instance to a Runtime Config (RTC). This is useful if you want your
	// instance to be dynamically discoverable through RTC targets. This is
	// disabled by default.
	RtcReportOptions *proto6.RtcReportOptions `protobuf:"bytes,99,opt,name=rtc_report_options,json=rtcReportOptions" json:"rtc_report_options,omitempty"`
	// Global targets options. Per-probe options are specified within the probe
	// stanza.
	GlobalTargetsOptions *proto7.GlobalTargetsOptions `protobuf:"bytes,100,opt,name=global_targets_options,json=globalTargetsOptions" json:"global_targets_options,omitempty"`
}

// Default values for ProberConfig fields.
const (
	Default_ProberConfig_DisableJitter       = bool(false)
	Default_ProberConfig_SysvarsIntervalMsec = int32(10000)
	Default_ProberConfig_SysvarsEnvVar       = string("SYSVARS")
)

func (x *ProberConfig) Reset() {
	*x = ProberConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_config_proto_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProberConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProberConfig) ProtoMessage() {}

func (x *ProberConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_config_proto_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProberConfig.ProtoReflect.Descriptor instead.
func (*ProberConfig) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_config_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *ProberConfig) GetProbe() []*proto1.ProbeDef {
	if x != nil {
		return x.Probe
	}
	return nil
}

func (x *ProberConfig) GetSurfacer() []*proto2.SurfacerDef {
	if x != nil {
		return x.Surfacer
	}
	return nil
}

func (x *ProberConfig) GetServer() []*proto3.ServerDef {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ProberConfig) GetSharedTargets() []*SharedTargets {
	if x != nil {
		return x.SharedTargets
	}
	return nil
}

func (x *ProberConfig) GetRdsServer() *proto4.ServerConf {
	if x != nil {
		return x.RdsServer
	}
	return nil
}

func (x *ProberConfig) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *ProberConfig) GetGrpcPort() int32 {
	if x != nil && x.GrpcPort != nil {
		return *x.GrpcPort
	}
	return 0
}

func (x *ProberConfig) GetGrpcTlsConfig() *proto5.TLSConfig {
	if x != nil {
		return x.GrpcTlsConfig
	}
	return nil
}

func (x *ProberConfig) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *ProberConfig) GetDisableJitter() bool {
	if x != nil && x.DisableJitter != nil {
		return *x.DisableJitter
	}
	return Default_ProberConfig_DisableJitter
}

func (x *ProberConfig) GetSysvarsIntervalMsec() int32 {
	if x != nil && x.SysvarsIntervalMsec != nil {
		return *x.SysvarsIntervalMsec
	}
	return Default_ProberConfig_SysvarsIntervalMsec
}

func (x *ProberConfig) GetSysvarsEnvVar() string {
	if x != nil && x.SysvarsEnvVar != nil {
		return *x.SysvarsEnvVar
	}
	return Default_ProberConfig_SysvarsEnvVar
}

func (x *ProberConfig) GetRtcReportOptions() *proto6.RtcReportOptions {
	if x != nil {
		return x.RtcReportOptions
	}
	return nil
}

func (x *ProberConfig) GetGlobalTargetsOptions() *proto7.GlobalTargetsOptions {
	if x != nil {
		return x.GlobalTargetsOptions
	}
	return nil
}

type SharedTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string            `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Targets *proto7.TargetsDef `protobuf:"bytes,2,req,name=targets" json:"targets,omitempty"`
}

func (x *SharedTargets) Reset() {
	*x = SharedTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_config_proto_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedTargets) ProtoMessage() {}

func (x *SharedTargets) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_config_proto_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedTargets.ProtoReflect.Descriptor instead.
func (*SharedTargets) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_config_proto_config_proto_rawDescGZIP(), []int{1}
}

func (x *SharedTargets) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SharedTargets) GetTargets() *proto7.TargetsDef {
	if x != nil {
		return x.Targets
	}
	return nil
}

var File_github_com_google_cloudprober_config_proto_config_proto protoreflect.FileDescriptor

var file_github_com_google_cloudprober_config_proto_config_proto_rawDesc = []byte{
	0x0a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x6c, 0x73,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2f, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x72, 0x74, 0x63, 0x2f, 0x72, 0x74, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x74,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa3, 0x06, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65, 0x66, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x72, 0x44, 0x65, 0x66, 0x52, 0x08, 0x73, 0x75, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72,
	0x2e, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x09, 0x72, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x72, 0x2e, 0x74, 0x6c, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x54, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x79, 0x73, 0x76, 0x61,
	0x72, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x13, 0x73,
	0x79, 0x73, 0x76, 0x61, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73,
	0x65, 0x63, 0x12, 0x2f, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x53, 0x59, 0x53,
	0x56, 0x41, 0x52, 0x53, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x12, 0x5f, 0x0a, 0x12, 0x72, 0x74, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x72, 0x74, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x10, 0x72, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x72, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x44, 0x65, 0x66, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_github_com_google_cloudprober_config_proto_config_proto_rawDescOnce sync.Once
	file_github_com_google_cloudprober_config_proto_config_proto_rawDescData = file_github_com_google_cloudprober_config_proto_config_proto_rawDesc
)

func file_github_com_google_cloudprober_config_proto_config_proto_rawDescGZIP() []byte {
	file_github_com_google_cloudprober_config_proto_config_proto_rawDescOnce.Do(func() {
		file_github_com_google_cloudprober_config_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_google_cloudprober_config_proto_config_proto_rawDescData)
	})
	return file_github_com_google_cloudprober_config_proto_config_proto_rawDescData
}

var file_github_com_google_cloudprober_config_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_google_cloudprober_config_proto_config_proto_goTypes = []interface{}{
	(*ProberConfig)(nil),                // 0: cloudprober.ProberConfig
	(*SharedTargets)(nil),               // 1: cloudprober.SharedTargets
	(*proto1.ProbeDef)(nil),             // 2: cloudprober.probes.ProbeDef
	(*proto2.SurfacerDef)(nil),          // 3: cloudprober.surfacer.SurfacerDef
	(*proto3.ServerDef)(nil),            // 4: cloudprober.servers.ServerDef
	(*proto4.ServerConf)(nil),           // 5: cloudprober.rds.ServerConf
	(*proto5.TLSConfig)(nil),            // 6: cloudprober.tlsconfig.TLSConfig
	(*proto6.RtcReportOptions)(nil),     // 7: cloudprober.targets.rtcreporter.RtcReportOptions
	(*proto7.GlobalTargetsOptions)(nil), // 8: cloudprober.targets.GlobalTargetsOptions
	(*proto7.TargetsDef)(nil),           // 9: cloudprober.targets.TargetsDef
}
var file_github_com_google_cloudprober_config_proto_config_proto_depIdxs = []int32{
	2, // 0: cloudprober.ProberConfig.probe:type_name -> cloudprober.probes.ProbeDef
	3, // 1: cloudprober.ProberConfig.surfacer:type_name -> cloudprober.surfacer.SurfacerDef
	4, // 2: cloudprober.ProberConfig.server:type_name -> cloudprober.servers.ServerDef
	1, // 3: cloudprober.ProberConfig.shared_targets:type_name -> cloudprober.SharedTargets
	5, // 4: cloudprober.ProberConfig.rds_server:type_name -> cloudprober.rds.ServerConf
	6, // 5: cloudprober.ProberConfig.grpc_tls_config:type_name -> cloudprober.tlsconfig.TLSConfig
	7, // 6: cloudprober.ProberConfig.rtc_report_options:type_name -> cloudprober.targets.rtcreporter.RtcReportOptions
	8, // 7: cloudprober.ProberConfig.global_targets_options:type_name -> cloudprober.targets.GlobalTargetsOptions
	9, // 8: cloudprober.SharedTargets.targets:type_name -> cloudprober.targets.TargetsDef
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_github_com_google_cloudprober_config_proto_config_proto_init() }
func file_github_com_google_cloudprober_config_proto_config_proto_init() {
	if File_github_com_google_cloudprober_config_proto_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_google_cloudprober_config_proto_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProberConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_config_proto_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_google_cloudprober_config_proto_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_google_cloudprober_config_proto_config_proto_goTypes,
		DependencyIndexes: file_github_com_google_cloudprober_config_proto_config_proto_depIdxs,
		MessageInfos:      file_github_com_google_cloudprober_config_proto_config_proto_msgTypes,
	}.Build()
	File_github_com_google_cloudprober_config_proto_config_proto = out.File
	file_github_com_google_cloudprober_config_proto_config_proto_rawDesc = nil
	file_github_com_google_cloudprober_config_proto_config_proto_goTypes = nil
	file_github_com_google_cloudprober_config_proto_config_proto_depIdxs = nil
}
