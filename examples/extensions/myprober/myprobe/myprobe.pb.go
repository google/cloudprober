// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/examples/extensions/myprober/myprobe/myprobe.proto

package myprobe

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/google/cloudprober/probes/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Redis operation
type ProbeConf_Op int32

const (
	ProbeConf_GET    ProbeConf_Op = 0
	ProbeConf_SET    ProbeConf_Op = 1
	ProbeConf_DELETE ProbeConf_Op = 2
)

var ProbeConf_Op_name = map[int32]string{
	0: "GET",
	1: "SET",
	2: "DELETE",
}
var ProbeConf_Op_value = map[string]int32{
	"GET":    0,
	"SET":    1,
	"DELETE": 2,
}

func (x ProbeConf_Op) Enum() *ProbeConf_Op {
	p := new(ProbeConf_Op)
	*p = x
	return p
}
func (x ProbeConf_Op) String() string {
	return proto.EnumName(ProbeConf_Op_name, int32(x))
}
func (x *ProbeConf_Op) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProbeConf_Op_value, data, "ProbeConf_Op")
	if err != nil {
		return err
	}
	*x = ProbeConf_Op(value)
	return nil
}
func (ProbeConf_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_myprobe_d7e15d891b47d6e2, []int{0, 0}
}

type ProbeConf struct {
	Op *ProbeConf_Op `protobuf:"varint,1,req,name=op,enum=myprober.ProbeConf_Op" json:"op,omitempty"`
	// Key and value for the redis operation
	Key                  *string  `protobuf:"bytes,2,req,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeConf) Reset()         { *m = ProbeConf{} }
func (m *ProbeConf) String() string { return proto.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()    {}
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_myprobe_d7e15d891b47d6e2, []int{0}
}
func (m *ProbeConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf.Unmarshal(m, b)
}
func (m *ProbeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf.Marshal(b, m, deterministic)
}
func (dst *ProbeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf.Merge(dst, src)
}
func (m *ProbeConf) XXX_Size() int {
	return xxx_messageInfo_ProbeConf.Size(m)
}
func (m *ProbeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf proto.InternalMessageInfo

func (m *ProbeConf) GetOp() ProbeConf_Op {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return ProbeConf_GET
}

func (m *ProbeConf) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ProbeConf) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

var E_RedisProbe = &proto.ExtensionDesc{
	ExtendedType:  (*proto1.ProbeDef)(nil),
	ExtensionType: (*ProbeConf)(nil),
	Field:         200,
	Name:          "myprober.redis_probe",
	Tag:           "bytes,200,opt,name=redis_probe,json=redisProbe",
	Filename:      "github.com/google/cloudprober/examples/extensions/myprober/myprobe/myprobe.proto",
}

func init() {
	proto.RegisterType((*ProbeConf)(nil), "myprober.ProbeConf")
	proto.RegisterEnum("myprober.ProbeConf_Op", ProbeConf_Op_name, ProbeConf_Op_value)
	proto.RegisterExtension(E_RedisProbe)
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/examples/extensions/myprober/myprobe/myprobe.proto", fileDescriptor_myprobe_d7e15d891b47d6e2)
}

var fileDescriptor_myprobe_d7e15d891b47d6e2 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8e, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0xcd, 0x06, 0x3f, 0x32, 0x05, 0x09, 0xab, 0x48, 0x10, 0x0f, 0x21, 0x07, 0xc9, 0x69,
	0x17, 0x7a, 0x11, 0xbc, 0xda, 0xc5, 0x8b, 0xd0, 0x92, 0xe6, 0x2e, 0x6d, 0x3a, 0x89, 0xc1, 0x24,
	0xb3, 0x64, 0x13, 0x69, 0x4f, 0xfe, 0x3d, 0x7f, 0x96, 0x64, 0xd3, 0x88, 0x07, 0xf1, 0x34, 0xef,
	0xf0, 0xee, 0x3e, 0xf3, 0xc0, 0xaa, 0x28, 0xbb, 0xb7, 0x7e, 0x2b, 0x32, 0xaa, 0x65, 0x41, 0x54,
	0x54, 0x28, 0xb3, 0x8a, 0xfa, 0x9d, 0x6e, 0x69, 0x8b, 0xad, 0xc4, 0xfd, 0xa6, 0xd6, 0x15, 0x1a,
	0x89, 0xfb, 0x0e, 0x1b, 0x53, 0x52, 0x63, 0x64, 0x7d, 0x38, 0x96, 0xc7, 0x30, 0x4d, 0xa1, 0x5b,
	0xea, 0x88, 0x5f, 0x4c, 0xfd, 0xed, 0xc3, 0xff, 0x6c, 0x3b, 0x8c, 0xb4, 0xbf, 0x64, 0x46, 0x4d,
	0x5e, 0x16, 0x23, 0x22, 0xfa, 0x04, 0x6f, 0x35, 0x94, 0x4f, 0xd4, 0xe4, 0xfc, 0x1e, 0x18, 0xe9,
	0xc0, 0x09, 0x59, 0x7c, 0x39, 0xbf, 0x11, 0x13, 0x5c, 0xfc, 0x3c, 0x10, 0x4b, 0x9d, 0x30, 0xd2,
	0xdc, 0x07, 0xf7, 0x1d, 0x0f, 0x01, 0x0b, 0x59, 0xec, 0x25, 0x43, 0xe4, 0xd7, 0x70, 0xfa, 0xb1,
	0xa9, 0x7a, 0x0c, 0xdc, 0xd0, 0x89, 0xbd, 0x64, 0x5c, 0xa2, 0x08, 0xd8, 0x52, 0xf3, 0x73, 0x70,
	0x9f, 0x55, 0xea, 0x9f, 0x0c, 0x61, 0xad, 0x52, 0xdf, 0xe1, 0x00, 0x67, 0x0b, 0xf5, 0xa2, 0x52,
	0xe5, 0xb3, 0xc7, 0x35, 0xcc, 0x5a, 0xdc, 0x95, 0xe6, 0xd5, 0x1e, 0xe3, 0x77, 0xe2, 0x97, 0xb7,
	0x18, 0xbd, 0x47, 0x81, 0x05, 0xe6, 0xc1, 0x97, 0x13, 0x3a, 0xf1, 0x6c, 0x7e, 0xf5, 0x87, 0x5b,
	0x02, 0x16, 0x63, 0xf7, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x88, 0x14, 0x2a, 0x6b, 0x01,
	0x00, 0x00,
}
