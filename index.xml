<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudprober</title>
    <link>https://cloudprober.org/</link>
    <description>Recent content on Cloudprober</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Oct 2019 17:24:32 -0700</lastBuildDate>
    
	<atom:link href="https://cloudprober.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Targets Discovery</title>
      <link>https://cloudprober.org/concepts/targets/</link>
      <pubDate>Fri, 25 Oct 2019 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/concepts/targets/</guid>
      <description>Automatic and continuous discovery of the targets is one of the core features of Cloudprober. This feature is specially critical for the dynamic environments that today&#39;s cloud based deployments make possible. For exmaple, in a kubernetes cluster number of pods and their IPs can change on the fly, either in response to replica count changes or node failures. Automated targets discovery makes sure that we don&#39;t have to reconfigure Cloudprober in response to such events.</description>
    </item>
    
    <item>
      <title>Built-in Servers</title>
      <link>https://cloudprober.org/how-to/built-in-servers/</link>
      <pubDate>Fri, 11 Oct 2019 17:48:13 -0500</pubDate>
      
      <guid>https://cloudprober.org/how-to/built-in-servers/</guid>
      <description>Cloudprober has a few built in servers. This is useful when you are probing that a connection is working, or as a baseline to compare the probing results from your actual service to.
HTTP server { type: HTTP http_server { port: 8080 } } This creates an HTTP server that responds on port 8080. By default it will respond to the following endpoints:
 /healthcheck /lameduck  server { type: HTTP http_server { port: 8080 pattern_data_handler { response_size: 1024 } pattern_data_handler { response_size: 4 pattern: &amp;#34;four&amp;#34; } } } This adds two endpoints to the HTTP server:</description>
    </item>
    
    <item>
      <title>Running On Kubernetes</title>
      <link>https://cloudprober.org/how-to/run-on-kubernetes/</link>
      <pubDate>Tue, 08 Oct 2019 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/how-to/run-on-kubernetes/</guid>
      <description>Kubernetes is a popular platform for running containers, and Cloudprober container runs on Kubernetes right out of the box. This document shows how you can use config map to provide config to cloudprober and reload cloudprober on config changes.
ConfigMap In Kubernetes, a convenient way to provide config to containers is to use config maps. Let&#39;s create a config that specifies a probe to monitor &amp;ldquo;google.com&amp;rdquo;.
probe { name: &amp;#34;google-http&amp;#34; type: HTTP targets { host_names: &amp;#34;www.</description>
    </item>
    
    <item>
      <title>Validators</title>
      <link>https://cloudprober.org/how-to/validators/</link>
      <pubDate>Sun, 28 Jul 2019 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/how-to/validators/</guid>
      <description>Validators allow you to run checks on the probe request output (if any). For example, you can specify if you expect the probe output to match a certain regex or return a certain status code (for HTTP). You can configure more than one validators and all validators should succeed for the probe to be marked as success.
probe { name: &amp;#34;google_homepage&amp;#34; type: HTTP targets { host_names: &amp;#34;www.google.com&amp;#34; } interval_msec: 10000 # Probe every 10s # This validator should succeed.</description>
    </item>
    
    <item>
      <title>Extending Cloudprober</title>
      <link>https://cloudprober.org/how-to/extensions/</link>
      <pubDate>Mon, 29 Oct 2018 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/how-to/extensions/</guid>
      <description>Cloudprober allows you to extend it across &amp;ldquo;probe&amp;rdquo; and &amp;ldquo;target&amp;rdquo; dimensions, that is, you can add new probe and target types to it without having to fork the entire codebase. Note that to extend cloudprober in this way, you will have to maintain your own cloudprober binary (which is mostly a wrapper around the &amp;ldquo;cloudprober package&amp;rdquo;), but you&#39;ll be able to use rest of the cloudprober code from the common location.</description>
    </item>
    
    <item>
      <title>External Probe</title>
      <link>https://cloudprober.org/how-to/external-probe/</link>
      <pubDate>Sun, 08 Oct 2017 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/how-to/external-probe/</guid>
      <description>External probe type allows you to run arbitrary, complex probes through Cloudprober. An external probe runs an independent external program for actual probing. Cloudprober calculates probe metrics based on program&#39;s exit status and time elapsed in execution. Cloudprober also allows external programs to provide additional metrics over stdout.
Sample Probe To understand how it works, lets create a sample probe that sets and gets a key in a redis server. Here is the main function of such a probe:</description>
    </item>
    
    <item>
      <title>Probe</title>
      <link>https://cloudprober.org/concepts/probe/</link>
      <pubDate>Tue, 25 Jul 2017 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/concepts/probe/</guid>
      <description>Cloudprober&#39;s main task is to run probes. A probe executes something, usually against a set of targets, to verify that the systems are working as expected from consumers&amp;rsquo; point of view. For example, an HTTP probe executes an HTTP request against a web server to verify that the web server is available. Cloudprober probes run repeatedly at a configured interval and export probe results as a set of metrics.
A probe is defined as a set of the following fields:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://cloudprober.org/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cloudprober.org/getting-started/</guid>
      <description>Installation  From Source
If you have Go 1.9 or higher installed and GOPATH environment variable properly set up, you can download and install cloudprober using the following commands:  go get github.com/google/cloudprober GOBIN=$GOPATH/bin go install $GOPATH/src/github.com/google/cloudprober/cmd/cloudprober.go   Pre-built Binaries
You can download the pre-built binaries for Linux, Mac OS and Windows from the project&#39;s releases page.
  Docker Image
You can download and run the latest docker image using the following command: docker run --net host cloudprober/cloudprober # Note: --net host provides better network performance and makes port forwarding # management easier.</description>
    </item>
    
  </channel>
</rss>