// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/probes/external/proto/config.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/google/cloudprober/metrics/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// External probes support two mode: ONCE and SERVER. In ONCE mode, external
// command is re-executed for each probe run, while in SERVER mode, command
// is run in server mode, re-executed only if not running already.
type ProbeConf_Mode int32

const (
	ProbeConf_ONCE   ProbeConf_Mode = 0
	ProbeConf_SERVER ProbeConf_Mode = 1
)

var ProbeConf_Mode_name = map[int32]string{
	0: "ONCE",
	1: "SERVER",
}

var ProbeConf_Mode_value = map[string]int32{
	"ONCE":   0,
	"SERVER": 1,
}

func (x ProbeConf_Mode) Enum() *ProbeConf_Mode {
	p := new(ProbeConf_Mode)
	*p = x
	return p
}

func (x ProbeConf_Mode) String() string {
	return proto.EnumName(ProbeConf_Mode_name, int32(x))
}

func (x *ProbeConf_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProbeConf_Mode_value, data, "ProbeConf_Mode")
	if err != nil {
		return err
	}
	*x = ProbeConf_Mode(value)
	return nil
}

func (ProbeConf_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f0ffe99a845b10e, []int{0, 0}
}

// MetricsKind specifies whether to treat output metrics as GAUGE or
// CUMULATIVE. If left unspecified, metrics from ONCE mode probes are treated
// as GAUGE and metrics from SERVER mode probes are treated as CUMULATIVE.
type OutputMetricsOptions_MetricsKind int32

const (
	OutputMetricsOptions_UNDEFINED  OutputMetricsOptions_MetricsKind = 0
	OutputMetricsOptions_GAUGE      OutputMetricsOptions_MetricsKind = 1
	OutputMetricsOptions_CUMULATIVE OutputMetricsOptions_MetricsKind = 2
)

var OutputMetricsOptions_MetricsKind_name = map[int32]string{
	0: "UNDEFINED",
	1: "GAUGE",
	2: "CUMULATIVE",
}

var OutputMetricsOptions_MetricsKind_value = map[string]int32{
	"UNDEFINED":  0,
	"GAUGE":      1,
	"CUMULATIVE": 2,
}

func (x OutputMetricsOptions_MetricsKind) Enum() *OutputMetricsOptions_MetricsKind {
	p := new(OutputMetricsOptions_MetricsKind)
	*p = x
	return p
}

func (x OutputMetricsOptions_MetricsKind) String() string {
	return proto.EnumName(OutputMetricsOptions_MetricsKind_name, int32(x))
}

func (x *OutputMetricsOptions_MetricsKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OutputMetricsOptions_MetricsKind_value, data, "OutputMetricsOptions_MetricsKind")
	if err != nil {
		return err
	}
	*x = OutputMetricsOptions_MetricsKind(value)
	return nil
}

func (OutputMetricsOptions_MetricsKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f0ffe99a845b10e, []int{1, 0}
}

type ProbeConf struct {
	Mode *ProbeConf_Mode `protobuf:"varint,1,opt,name=mode,enum=cloudprober.probes.external.ProbeConf_Mode,def=0" json:"mode,omitempty"`
	// Command.  For ONCE probes, arguments are processed for the following field
	// substitutions:
	// @probe@    Name of the probe
	// @target@   Hostname of the target
	// @address@  IP address of the target
	//
	// For example, for target ig-us-central1-a, /tools/recreate_vm -vm @target@
	// will get converted to: /tools/recreate_vm -vm ig-us-central1-a
	Command *string             `protobuf:"bytes,2,req,name=command" json:"command,omitempty"`
	Options []*ProbeConf_Option `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	// Export output as metrics, where output is the output returned by the
	// external probe process, over stdout for ONCE probes, and through ProbeReply
	// for SERVER probes. Cloudprober expects variables to be in the following
	// format in the output:
	// var1 value1 (for example: total_errors 589)
	OutputAsMetrics      *bool                 `protobuf:"varint,4,opt,name=output_as_metrics,json=outputAsMetrics,def=1" json:"output_as_metrics,omitempty"`
	OutputMetricsOptions *OutputMetricsOptions `protobuf:"bytes,5,opt,name=output_metrics_options,json=outputMetricsOptions" json:"output_metrics_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProbeConf) Reset()         { *m = ProbeConf{} }
func (m *ProbeConf) String() string { return proto.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()    {}
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f0ffe99a845b10e, []int{0}
}

func (m *ProbeConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf.Unmarshal(m, b)
}
func (m *ProbeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf.Marshal(b, m, deterministic)
}
func (m *ProbeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf.Merge(m, src)
}
func (m *ProbeConf) XXX_Size() int {
	return xxx_messageInfo_ProbeConf.Size(m)
}
func (m *ProbeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf proto.InternalMessageInfo

const Default_ProbeConf_Mode ProbeConf_Mode = ProbeConf_ONCE
const Default_ProbeConf_OutputAsMetrics bool = true

func (m *ProbeConf) GetMode() ProbeConf_Mode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return Default_ProbeConf_Mode
}

func (m *ProbeConf) GetCommand() string {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return ""
}

func (m *ProbeConf) GetOptions() []*ProbeConf_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ProbeConf) GetOutputAsMetrics() bool {
	if m != nil && m.OutputAsMetrics != nil {
		return *m.OutputAsMetrics
	}
	return Default_ProbeConf_OutputAsMetrics
}

func (m *ProbeConf) GetOutputMetricsOptions() *OutputMetricsOptions {
	if m != nil {
		return m.OutputMetricsOptions
	}
	return nil
}

// Options for the SERVER mode probe requests. These options are passed on to
// the external probe server as part of the ProbeRequest. Values are
// substituted similar to command arguments for the ONCE mode probes.
type ProbeConf_Option struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeConf_Option) Reset()         { *m = ProbeConf_Option{} }
func (m *ProbeConf_Option) String() string { return proto.CompactTextString(m) }
func (*ProbeConf_Option) ProtoMessage()    {}
func (*ProbeConf_Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f0ffe99a845b10e, []int{0, 0}
}

func (m *ProbeConf_Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf_Option.Unmarshal(m, b)
}
func (m *ProbeConf_Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf_Option.Marshal(b, m, deterministic)
}
func (m *ProbeConf_Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf_Option.Merge(m, src)
}
func (m *ProbeConf_Option) XXX_Size() int {
	return xxx_messageInfo_ProbeConf_Option.Size(m)
}
func (m *ProbeConf_Option) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf_Option.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf_Option proto.InternalMessageInfo

func (m *ProbeConf_Option) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ProbeConf_Option) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type OutputMetricsOptions struct {
	MetricsKind *OutputMetricsOptions_MetricsKind `protobuf:"varint,1,opt,name=metrics_kind,json=metricsKind,enum=cloudprober.probes.external.OutputMetricsOptions_MetricsKind" json:"metrics_kind,omitempty"`
	// Additional labels (comma-separated) to attach to the output metrics, e.g.
	// "region=us-east1,zone=us-east1-d". ptype="external" and probe="<probeName>"
	// are attached automatically.
	AdditionalLabels *string `protobuf:"bytes,2,opt,name=additional_labels,json=additionalLabels" json:"additional_labels,omitempty"`
	// Whether to aggregate metrics in Cloudprober. If enabled, Cloudprober
	// aggregates the metrics returned by the external probe process -- external
	// probe process should return metrics only since the last probe run.
	// Note that this option is mutually exclusive with GAUGE metrics and
	// cloudprober will fail during initialization if both options are enabled.
	AggregateInCloudprober *bool `protobuf:"varint,3,opt,name=aggregate_in_cloudprober,json=aggregateInCloudprober,def=0" json:"aggregate_in_cloudprober,omitempty"`
	// Metrics that should be treated as distributions. These metrics are exported
	// by the external probe program as comma-separated list of values, for
	// example: "op_latency 4.7,5.6,5.9,6.1,4.9". To be able to build distribution
	// from these values, these metrics should be pre-configured in external
	// probe:
	// dist_metric {
	//   key: "op_latency"
	//   value {
	//     explicit_buckets: "1,2,4,8,16,32,64,128,256"
	//   }
	// }
	DistMetric           map[string]*proto1.Dist `protobuf:"bytes,4,rep,name=dist_metric,json=distMetric" json:"dist_metric,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *OutputMetricsOptions) Reset()         { *m = OutputMetricsOptions{} }
func (m *OutputMetricsOptions) String() string { return proto.CompactTextString(m) }
func (*OutputMetricsOptions) ProtoMessage()    {}
func (*OutputMetricsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f0ffe99a845b10e, []int{1}
}

func (m *OutputMetricsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputMetricsOptions.Unmarshal(m, b)
}
func (m *OutputMetricsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputMetricsOptions.Marshal(b, m, deterministic)
}
func (m *OutputMetricsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputMetricsOptions.Merge(m, src)
}
func (m *OutputMetricsOptions) XXX_Size() int {
	return xxx_messageInfo_OutputMetricsOptions.Size(m)
}
func (m *OutputMetricsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputMetricsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OutputMetricsOptions proto.InternalMessageInfo

const Default_OutputMetricsOptions_AggregateInCloudprober bool = false

func (m *OutputMetricsOptions) GetMetricsKind() OutputMetricsOptions_MetricsKind {
	if m != nil && m.MetricsKind != nil {
		return *m.MetricsKind
	}
	return OutputMetricsOptions_UNDEFINED
}

func (m *OutputMetricsOptions) GetAdditionalLabels() string {
	if m != nil && m.AdditionalLabels != nil {
		return *m.AdditionalLabels
	}
	return ""
}

func (m *OutputMetricsOptions) GetAggregateInCloudprober() bool {
	if m != nil && m.AggregateInCloudprober != nil {
		return *m.AggregateInCloudprober
	}
	return Default_OutputMetricsOptions_AggregateInCloudprober
}

func (m *OutputMetricsOptions) GetDistMetric() map[string]*proto1.Dist {
	if m != nil {
		return m.DistMetric
	}
	return nil
}

func init() {
	proto.RegisterEnum("cloudprober.probes.external.ProbeConf_Mode", ProbeConf_Mode_name, ProbeConf_Mode_value)
	proto.RegisterEnum("cloudprober.probes.external.OutputMetricsOptions_MetricsKind", OutputMetricsOptions_MetricsKind_name, OutputMetricsOptions_MetricsKind_value)
	proto.RegisterType((*ProbeConf)(nil), "cloudprober.probes.external.ProbeConf")
	proto.RegisterType((*ProbeConf_Option)(nil), "cloudprober.probes.external.ProbeConf.Option")
	proto.RegisterType((*OutputMetricsOptions)(nil), "cloudprober.probes.external.OutputMetricsOptions")
	proto.RegisterMapType((map[string]*proto1.Dist)(nil), "cloudprober.probes.external.OutputMetricsOptions.DistMetricEntry")
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/probes/external/proto/config.proto", fileDescriptor_8f0ffe99a845b10e)
}

var fileDescriptor_8f0ffe99a845b10e = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0x8f, 0xd2, 0x40,
	0x10, 0xbe, 0xd2, 0x72, 0x77, 0x4c, 0xf5, 0xae, 0xb7, 0x21, 0x97, 0x8a, 0x3e, 0x10, 0x9e, 0x48,
	0x2e, 0xb6, 0xca, 0x83, 0x1a, 0x12, 0xa3, 0x04, 0x2a, 0x21, 0x1e, 0x60, 0x56, 0xb9, 0xf8, 0x56,
	0x17, 0xba, 0xd4, 0xe6, 0xda, 0x5d, 0xd2, 0x6e, 0x8d, 0xf7, 0x77, 0xfc, 0x5f, 0xfe, 0x17, 0xd3,
	0xed, 0x16, 0xd0, 0x5c, 0x88, 0xf7, 0xd4, 0x9d, 0x99, 0xef, 0x9b, 0xf9, 0x66, 0xbe, 0xc2, 0xfb,
	0x30, 0x12, 0xdf, 0xf3, 0xa5, 0xb3, 0xe2, 0x89, 0x1b, 0x72, 0x1e, 0xc6, 0xd4, 0x5d, 0xc5, 0x3c,
	0x0f, 0x36, 0x29, 0x5f, 0xd2, 0xd4, 0x95, 0x9f, 0xcc, 0xa5, 0x3f, 0x05, 0x4d, 0x19, 0x89, 0x8b,
	0x58, 0x70, 0x77, 0xc5, 0xd9, 0x3a, 0x0a, 0x1d, 0x19, 0xa0, 0xa7, 0x7b, 0x78, 0xa7, 0xc4, 0x3b,
	0x15, 0xbe, 0xf5, 0xea, 0x70, 0xfb, 0x84, 0x8a, 0x34, 0x5a, 0x65, 0xaa, 0x6d, 0x10, 0x65, 0xa2,
	0x6c, 0xda, 0xf9, 0xa5, 0x43, 0xe3, 0x53, 0x81, 0x19, 0x72, 0xb6, 0x46, 0x1e, 0x18, 0x09, 0x0f,
	0xa8, 0xad, 0xb5, 0xb5, 0xee, 0x59, 0xef, 0xca, 0x39, 0x30, 0xd1, 0xd9, 0xb2, 0x9c, 0x29, 0x0f,
	0x68, 0xdf, 0x98, 0xcf, 0x86, 0x1e, 0x96, 0x74, 0x64, 0xc3, 0xc9, 0x8a, 0x27, 0x09, 0x61, 0x81,
	0x5d, 0x6b, 0xd7, 0xba, 0x0d, 0x5c, 0x85, 0x68, 0x0c, 0x27, 0x7c, 0x23, 0x22, 0xce, 0x32, 0x5b,
	0x6f, 0xeb, 0x5d, 0xb3, 0xf7, 0xfc, 0x3f, 0x67, 0xcc, 0x25, 0x0b, 0x57, 0x6c, 0xf4, 0x02, 0x2e,
	0x78, 0x2e, 0x36, 0xb9, 0xf0, 0x49, 0xe6, 0xab, 0xed, 0x6c, 0xa3, 0xad, 0x75, 0x4f, 0xfb, 0x86,
	0x48, 0x73, 0x8a, 0xcf, 0xcb, 0xf2, 0x20, 0x9b, 0x96, 0x45, 0x14, 0xc2, 0xa5, 0x62, 0x28, 0xb8,
	0x5f, 0x29, 0xa9, 0xb7, 0xb5, 0xae, 0xd9, 0x7b, 0x79, 0x50, 0xc9, 0x5c, 0x52, 0x55, 0xaf, 0x52,
	0x4c, 0x86, 0x9b, 0xfc, 0x9e, 0x6c, 0xab, 0x07, 0xc7, 0xe5, 0x13, 0x21, 0x30, 0x18, 0x49, 0xca,
	0x73, 0x36, 0xb0, 0x7c, 0xa3, 0x26, 0xd4, 0x7f, 0x90, 0x38, 0xa7, 0x76, 0x4d, 0x26, 0xcb, 0xa0,
	0xf3, 0x0c, 0x8c, 0xe2, 0x8a, 0xe8, 0x14, 0xe4, 0x1d, 0xad, 0x23, 0x04, 0x70, 0xfc, 0xd9, 0xc3,
	0x37, 0x1e, 0xb6, 0xb4, 0xce, 0x6f, 0x1d, 0x9a, 0xf7, 0x09, 0x40, 0xdf, 0xe0, 0x51, 0xb5, 0xcc,
	0x6d, 0xc4, 0x02, 0xe5, 0xdb, 0xdb, 0x07, 0x6f, 0xe2, 0xa8, 0xf0, 0x63, 0xc4, 0x02, 0x6c, 0x26,
	0xbb, 0x00, 0x5d, 0xc1, 0x05, 0x09, 0x82, 0xa8, 0x40, 0x91, 0xd8, 0x8f, 0xc9, 0x92, 0xc6, 0x99,
	0x92, 0x6e, 0xed, 0x0a, 0xd7, 0x32, 0x8f, 0xde, 0x81, 0x4d, 0xc2, 0x30, 0xa5, 0x21, 0x11, 0xd4,
	0x8f, 0x98, 0xbf, 0x27, 0xc3, 0xd6, 0xa5, 0x37, 0xf5, 0x35, 0x89, 0x33, 0x8a, 0x2f, 0xb7, 0xb0,
	0x09, 0x1b, 0xee, 0x40, 0x68, 0x09, 0x66, 0xf1, 0x6f, 0x2a, 0x87, 0x6c, 0x43, 0xfe, 0x22, 0x83,
	0x87, 0xaf, 0x33, 0x8a, 0x32, 0x95, 0xf2, 0x98, 0x48, 0xef, 0x30, 0x04, 0xdb, 0x44, 0xeb, 0x2b,
	0x9c, 0xff, 0x53, 0x46, 0x16, 0xe8, 0xb7, 0xf4, 0x4e, 0xd9, 0x54, 0x3c, 0x91, 0xbb, 0xef, 0x92,
	0xd9, 0x7b, 0xf2, 0x97, 0x04, 0x75, 0x1f, 0x39, 0x45, 0x19, 0xd8, 0xaf, 0xbd, 0xd1, 0x3a, 0xaf,
	0xc1, 0xdc, 0xbb, 0x23, 0x7a, 0x0c, 0x8d, 0xc5, 0x6c, 0xe4, 0x7d, 0x98, 0xcc, 0xbc, 0x91, 0x75,
	0x84, 0x1a, 0x50, 0x1f, 0x0f, 0x16, 0x63, 0xcf, 0xd2, 0xd0, 0x19, 0xc0, 0x70, 0x31, 0x5d, 0x5c,
	0x0f, 0xbe, 0x4c, 0x6e, 0x3c, 0xab, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xbf, 0x97, 0x5a,
	0x1c, 0x04, 0x00, 0x00,
}
