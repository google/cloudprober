// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/probes/grpc/proto/config.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/google/cloudprober/common/oauth/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProbeConf_MethodType int32

const (
	ProbeConf_ECHO  ProbeConf_MethodType = 1
	ProbeConf_READ  ProbeConf_MethodType = 2
	ProbeConf_WRITE ProbeConf_MethodType = 3
)

var ProbeConf_MethodType_name = map[int32]string{
	1: "ECHO",
	2: "READ",
	3: "WRITE",
}

var ProbeConf_MethodType_value = map[string]int32{
	"ECHO":  1,
	"READ":  2,
	"WRITE": 3,
}

func (x ProbeConf_MethodType) Enum() *ProbeConf_MethodType {
	p := new(ProbeConf_MethodType)
	*p = x
	return p
}

func (x ProbeConf_MethodType) String() string {
	return proto.EnumName(ProbeConf_MethodType_name, int32(x))
}

func (x *ProbeConf_MethodType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProbeConf_MethodType_value, data, "ProbeConf_MethodType")
	if err != nil {
		return err
	}
	*x = ProbeConf_MethodType(value)
	return nil
}

func (ProbeConf_MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8042d1320664eabf, []int{0, 0}
}

type ProbeConf struct {
	// Optional oauth config. For GOOGLE_DEFAULT_CREDENTIALS, use:
	// oauth_config: { bearer_token { gce_service_account: "default" } }
	OauthConfig *proto1.Config `protobuf:"bytes,1,opt,name=oauth_config,json=oauthConfig" json:"oauth_config,omitempty"`
	// If alts_config is provided, gRPC client uses ALTS for authentication and
	// encryption. For default alts configs, use:
	// alts_config: {}
	AltsConfig *ProbeConf_ALTSConfig `protobuf:"bytes,2,opt,name=alts_config,json=altsConfig" json:"alts_config,omitempty"`
	Method     *ProbeConf_MethodType `protobuf:"varint,3,opt,name=method,enum=cloudprober.probes.grpc.ProbeConf_MethodType,def=1" json:"method,omitempty"`
	BlobSize   *int32                `protobuf:"varint,4,opt,name=blob_size,json=blobSize,def=1024" json:"blob_size,omitempty"`
	NumConns   *int32                `protobuf:"varint,5,opt,name=num_conns,json=numConns,def=2" json:"num_conns,omitempty"`
	KeepAlive  *bool                 `protobuf:"varint,6,opt,name=keep_alive,json=keepAlive,def=1" json:"keep_alive,omitempty"`
	// If connect_timeout is not specified, reuse probe timeout.
	ConnectTimeoutMsec   *int32   `protobuf:"varint,7,opt,name=connect_timeout_msec,json=connectTimeoutMsec" json:"connect_timeout_msec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeConf) Reset()         { *m = ProbeConf{} }
func (m *ProbeConf) String() string { return proto.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()    {}
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_8042d1320664eabf, []int{0}
}

func (m *ProbeConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf.Unmarshal(m, b)
}
func (m *ProbeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf.Marshal(b, m, deterministic)
}
func (m *ProbeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf.Merge(m, src)
}
func (m *ProbeConf) XXX_Size() int {
	return xxx_messageInfo_ProbeConf.Size(m)
}
func (m *ProbeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf proto.InternalMessageInfo

const Default_ProbeConf_Method ProbeConf_MethodType = ProbeConf_ECHO
const Default_ProbeConf_BlobSize int32 = 1024
const Default_ProbeConf_NumConns int32 = 2
const Default_ProbeConf_KeepAlive bool = true

func (m *ProbeConf) GetOauthConfig() *proto1.Config {
	if m != nil {
		return m.OauthConfig
	}
	return nil
}

func (m *ProbeConf) GetAltsConfig() *ProbeConf_ALTSConfig {
	if m != nil {
		return m.AltsConfig
	}
	return nil
}

func (m *ProbeConf) GetMethod() ProbeConf_MethodType {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return Default_ProbeConf_Method
}

func (m *ProbeConf) GetBlobSize() int32 {
	if m != nil && m.BlobSize != nil {
		return *m.BlobSize
	}
	return Default_ProbeConf_BlobSize
}

func (m *ProbeConf) GetNumConns() int32 {
	if m != nil && m.NumConns != nil {
		return *m.NumConns
	}
	return Default_ProbeConf_NumConns
}

func (m *ProbeConf) GetKeepAlive() bool {
	if m != nil && m.KeepAlive != nil {
		return *m.KeepAlive
	}
	return Default_ProbeConf_KeepAlive
}

func (m *ProbeConf) GetConnectTimeoutMsec() int32 {
	if m != nil && m.ConnectTimeoutMsec != nil {
		return *m.ConnectTimeoutMsec
	}
	return 0
}

// ALTS is a gRPC security method supported by some Google services.
// If enabled, peers, with the help of a handshaker service (e.g. metadata
// server of GCE instances), use credentials attached to the service accounts
// to authenticate each other. See
// https://cloud.google.com/security/encryption-in-transit/#service_integrity_encryption
// for more details.
type ProbeConf_ALTSConfig struct {
	// If provided, ALTS verifies that peer is using one of the given service
	// accounts.
	TargetServiceAccount []string `protobuf:"bytes,1,rep,name=target_service_account,json=targetServiceAccount" json:"target_service_account,omitempty"`
	// Handshaker service address. Default is to use the local metadata server.
	// For most of the ALTS use cases, default address should be okay.
	HandshakerServiceAddress *string  `protobuf:"bytes,2,opt,name=handshaker_service_address,json=handshakerServiceAddress" json:"handshaker_service_address,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *ProbeConf_ALTSConfig) Reset()         { *m = ProbeConf_ALTSConfig{} }
func (m *ProbeConf_ALTSConfig) String() string { return proto.CompactTextString(m) }
func (*ProbeConf_ALTSConfig) ProtoMessage()    {}
func (*ProbeConf_ALTSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8042d1320664eabf, []int{0, 0}
}

func (m *ProbeConf_ALTSConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf_ALTSConfig.Unmarshal(m, b)
}
func (m *ProbeConf_ALTSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf_ALTSConfig.Marshal(b, m, deterministic)
}
func (m *ProbeConf_ALTSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf_ALTSConfig.Merge(m, src)
}
func (m *ProbeConf_ALTSConfig) XXX_Size() int {
	return xxx_messageInfo_ProbeConf_ALTSConfig.Size(m)
}
func (m *ProbeConf_ALTSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf_ALTSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf_ALTSConfig proto.InternalMessageInfo

func (m *ProbeConf_ALTSConfig) GetTargetServiceAccount() []string {
	if m != nil {
		return m.TargetServiceAccount
	}
	return nil
}

func (m *ProbeConf_ALTSConfig) GetHandshakerServiceAddress() string {
	if m != nil && m.HandshakerServiceAddress != nil {
		return *m.HandshakerServiceAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("cloudprober.probes.grpc.ProbeConf_MethodType", ProbeConf_MethodType_name, ProbeConf_MethodType_value)
	proto.RegisterType((*ProbeConf)(nil), "cloudprober.probes.grpc.ProbeConf")
	proto.RegisterType((*ProbeConf_ALTSConfig)(nil), "cloudprober.probes.grpc.ProbeConf.ALTSConfig")
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/probes/grpc/proto/config.proto", fileDescriptor_8042d1320664eabf)
}

var fileDescriptor_8042d1320664eabf = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x99, 0x6d, 0xba, 0x36, 0xaf, 0x22, 0x65, 0x58, 0x34, 0xf6, 0x20, 0x71, 0xbd, 0x04,
	0xc4, 0xc9, 0x5a, 0xf6, 0x54, 0xea, 0xa1, 0xd4, 0x82, 0xa2, 0xab, 0x32, 0x2d, 0x78, 0x0c, 0xe9,
	0xe4, 0x6d, 0x12, 0x36, 0xc9, 0x94, 0xcc, 0x64, 0xc1, 0x3d, 0xf9, 0x91, 0xfc, 0x88, 0x32, 0x33,
	0x5d, 0xd3, 0x83, 0xca, 0x9e, 0x32, 0xef, 0xfd, 0x7f, 0xef, 0x37, 0xc3, 0x0b, 0x2c, 0xf2, 0x52,
	0x17, 0xdd, 0x8e, 0x09, 0x59, 0xc7, 0xb9, 0x94, 0x79, 0x85, 0xb1, 0xa8, 0x64, 0x97, 0xed, 0x5b,
	0xb9, 0xc3, 0x36, 0xb6, 0x1f, 0x15, 0xe7, 0xed, 0x5e, 0x98, 0xb3, 0x96, 0xb1, 0x90, 0xcd, 0x75,
	0x99, 0x33, 0x5b, 0xd0, 0x67, 0x47, 0x2c, 0x73, 0x2c, 0x33, 0xec, 0xf4, 0xdd, 0xff, 0xb5, 0x42,
	0xd6, 0xb5, 0x6c, 0x62, 0x99, 0x76, 0xba, 0xf8, 0x8b, 0xf7, 0xfc, 0x97, 0x07, 0xfe, 0x37, 0x83,
	0xae, 0x64, 0x73, 0x4d, 0x17, 0xf0, 0xd8, 0x92, 0x89, 0x63, 0x02, 0x12, 0x92, 0x68, 0x3c, 0x7b,
	0xce, 0x8e, 0x2f, 0xb7, 0x00, 0x5b, 0x59, 0x80, 0x8f, 0x6d, 0xe5, 0x0a, 0xfa, 0x05, 0xc6, 0x69,
	0xa5, 0xd5, 0xfd, 0xf0, 0x89, 0x1d, 0x7e, 0xc3, 0xfe, 0xf1, 0x72, 0xf6, 0xe7, 0x5a, 0xb6, 0xfc,
	0xbc, 0xdd, 0x1c, 0x84, 0x60, 0x0c, 0x07, 0xdf, 0x27, 0x38, 0xad, 0x51, 0x17, 0x32, 0x0b, 0x06,
	0x21, 0x89, 0x9e, 0x3c, 0x48, 0x75, 0x65, 0x07, 0xb6, 0x3f, 0xf6, 0x38, 0xf7, 0xd6, 0xab, 0x0f,
	0x5f, 0xf9, 0x41, 0x41, 0x5f, 0x82, 0xbf, 0xab, 0xe4, 0x2e, 0x51, 0xe5, 0x1d, 0x06, 0x5e, 0x48,
	0xa2, 0xe1, 0xdc, 0x7b, 0x7b, 0x31, 0xbb, 0xe4, 0x23, 0xd3, 0xde, 0x94, 0x77, 0x48, 0x5f, 0x80,
	0xdf, 0x74, 0xb5, 0x79, 0x7e, 0xa3, 0x82, 0xa1, 0x45, 0xc8, 0x8c, 0x8f, 0x9a, 0xae, 0x5e, 0x99,
	0x16, 0x7d, 0x05, 0x70, 0x83, 0xb8, 0x4f, 0xd2, 0xaa, 0xbc, 0xc5, 0xe0, 0x34, 0x24, 0xd1, 0x68,
	0xee, 0xe9, 0xb6, 0x43, 0xee, 0x9b, 0xfe, 0xd2, 0xb4, 0xe9, 0x05, 0x9c, 0x19, 0x01, 0x0a, 0x9d,
	0xe8, 0xb2, 0x46, 0xd9, 0xe9, 0xa4, 0x56, 0x28, 0x82, 0x47, 0xc6, 0xc7, 0xe9, 0x21, 0xdb, 0xba,
	0xe8, 0x4a, 0xa1, 0x98, 0xfe, 0x24, 0x00, 0xfd, 0x06, 0xe8, 0x25, 0x3c, 0xd5, 0x69, 0x9b, 0xa3,
	0x4e, 0x14, 0xb6, 0xb7, 0xa5, 0xc0, 0x24, 0x15, 0x42, 0x76, 0x8d, 0x0e, 0x48, 0x38, 0x88, 0x7c,
	0x7e, 0xe6, 0xd2, 0x8d, 0x0b, 0x97, 0x2e, 0xa3, 0x0b, 0x98, 0x16, 0x69, 0x93, 0xa9, 0x22, 0xbd,
	0xc1, 0xb6, 0x9f, 0xcc, 0xb2, 0x16, 0x95, 0xb2, 0xbf, 0xc2, 0xe7, 0x41, 0x4f, 0xdc, 0x4f, 0xbb,
	0xfc, 0xfc, 0x35, 0x40, 0xbf, 0x38, 0x3a, 0x02, 0xbb, 0xba, 0x09, 0x31, 0x27, 0xbe, 0x5e, 0xbe,
	0x9f, 0x9c, 0x50, 0x1f, 0x86, 0xdf, 0xf9, 0xc7, 0xed, 0x7a, 0x32, 0xf8, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x04, 0x41, 0xef, 0x8b, 0xc9, 0x02, 0x00, 0x00,
}
