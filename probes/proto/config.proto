syntax = "proto2";

import "github.com/google/cloudprober/metrics/proto/dist.proto";
import "github.com/google/cloudprober/probes/http/proto/config.proto";
import "github.com/google/cloudprober/probes/dns/proto/config.proto";
import "github.com/google/cloudprober/probes/external/proto/config.proto";
import "github.com/google/cloudprober/probes/ping/proto/config.proto";
import "github.com/google/cloudprober/probes/udp/proto/config.proto";
import "github.com/google/cloudprober/probes/udplistener/proto/config.proto";
import "github.com/google/cloudprober/targets/proto/targets.proto";
import "github.com/google/cloudprober/validators/proto/config.proto";

package cloudprober.probes;

message ProbeDef {
  required string name = 1;

  enum Type {
    PING = 0;
    HTTP = 1;
    DNS = 2;
    EXTERNAL = 3;
    UDP = 4;
    UDP_LISTENER = 5;

    // One of the extension probe types. See "extensions" below for more
    // details.
    EXTENSION = 98;

    // USER_DEFINED probe type is for a one off probe that you want to compile
    // into cloudprober, but you don't expect it to be reused. If you expect
    // it to be reused, you should consider adding it using the extensions
    // mechanism.
    USER_DEFINED = 99;
  }
  required Type type = 2;

  // Which machines this probe should run on. If defined, cloudprober will run
  // this probe only if machine's hostname matches this value.
  optional string run_on = 3;

  // Interval between two probes
  optional int32 interval_msec = 4 [default = 2000];

  // Timeout for each probe
  optional int32 timeout_msec = 5 [default = 1000];

  // Targets for the probe
  required targets.TargetsDef targets = 6;

  // Latency distribution. If specified, latency is stored as a distribution.
  optional metrics.Dist latency_distribution = 7;

  // Latency unit. Any string that's parseable by time.ParseDuration.
  // Valid values: "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  optional string latency_unit = 8 [default = "us"];

  // Validators are in experimental phase right now and can change at any time.
  // They only work for ping and http probes right now.
  repeated validators.Validator validator = 9;

  oneof probe {
    ping.ProbeConf ping_probe = 20;
    http.ProbeConf http_probe = 21;
    dns.ProbeConf dns_probe = 22;
    external.ProbeConf external_probe = 23;
    udp.ProbeConf udp_probe = 24;
    udplistener.ProbeConf udp_listener_probe = 25;
    // This field's contents are passed on to the user defined probe, registered
    // for this probe's name through probes.RegisterUserDefined().
    string user_defined_probe = 99;
  }

  // Extensions allow users to to add new probe types (for example, a probe type
  // that utilizes a custom protocol) in a systematic manner.
  extensions 200 to max;
}
