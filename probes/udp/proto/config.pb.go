// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/probes/udp/proto/config.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProbeConf struct {
	// Port to send UDP Ping to (UDP Echo).  If running with the UDP server that
	// comes with cloudprober, it should be same as
	// ProberConfig.udp_echo_server_port.
	Port *int32 `protobuf:"varint,3,opt,name=port,def=31122" json:"port,omitempty"`
	// Number of sending side ports to use.
	NumTxPorts *int32 `protobuf:"varint,4,opt,name=num_tx_ports,json=numTxPorts,def=16" json:"num_tx_ports,omitempty"`
	// message max to account for MTU.
	MaxLength *int32 `protobuf:"varint,5,opt,name=max_length,json=maxLength,def=1300" json:"max_length,omitempty"`
	// IP proto: v4|v6.
	// This field is now deprecated and will be removed after the release v0.10.3.
	// ip_version can be configured in the outer layer of the config:
	// probe {
	//   type: UDP
	//   ip_version: 6
	//   udp_probe {}
	// }
	IpVersion *int32 `protobuf:"varint,6,opt,name=ip_version,json=ipVersion" json:"ip_version,omitempty"`
	// Changes the exported monitoring streams to be per port:
	// 1. Changes the streams names to total-per-port, success-per-port etc.
	// 2. Adds src_port and dst_port as stream labels.
	// Note that the field name is experimental and may change in the future.
	ExportMetricsByPort *bool `protobuf:"varint,7,opt,name=export_metrics_by_port,json=exportMetricsByPort,def=0" json:"export_metrics_by_port,omitempty"`
	// Whether to use all transmit ports per probe, per target.
	// Default is to probe each target once per probe and round-robin through the
	// source ports.
	// Setting this field to true changes the behavior to send traffic from all
	// ports to all targets in each probe.
	// For example, if num_tx_ports is set to 16, in every probe cycle, we'll send
	// 16 packets to every target (1 per tx port).
	// Note that setting this field to true will increase the probe traffic.
	UseAllTxPortsPerProbe *bool    `protobuf:"varint,8,opt,name=use_all_tx_ports_per_probe,json=useAllTxPortsPerProbe,def=0" json:"use_all_tx_ports_per_probe,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ProbeConf) Reset()         { *m = ProbeConf{} }
func (m *ProbeConf) String() string { return proto.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()    {}
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34d5b2886f1258a, []int{0}
}

func (m *ProbeConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf.Unmarshal(m, b)
}
func (m *ProbeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf.Marshal(b, m, deterministic)
}
func (m *ProbeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf.Merge(m, src)
}
func (m *ProbeConf) XXX_Size() int {
	return xxx_messageInfo_ProbeConf.Size(m)
}
func (m *ProbeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf proto.InternalMessageInfo

const Default_ProbeConf_Port int32 = 31122
const Default_ProbeConf_NumTxPorts int32 = 16
const Default_ProbeConf_MaxLength int32 = 1300
const Default_ProbeConf_ExportMetricsByPort bool = false
const Default_ProbeConf_UseAllTxPortsPerProbe bool = false

func (m *ProbeConf) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_ProbeConf_Port
}

func (m *ProbeConf) GetNumTxPorts() int32 {
	if m != nil && m.NumTxPorts != nil {
		return *m.NumTxPorts
	}
	return Default_ProbeConf_NumTxPorts
}

func (m *ProbeConf) GetMaxLength() int32 {
	if m != nil && m.MaxLength != nil {
		return *m.MaxLength
	}
	return Default_ProbeConf_MaxLength
}

func (m *ProbeConf) GetIpVersion() int32 {
	if m != nil && m.IpVersion != nil {
		return *m.IpVersion
	}
	return 0
}

func (m *ProbeConf) GetExportMetricsByPort() bool {
	if m != nil && m.ExportMetricsByPort != nil {
		return *m.ExportMetricsByPort
	}
	return Default_ProbeConf_ExportMetricsByPort
}

func (m *ProbeConf) GetUseAllTxPortsPerProbe() bool {
	if m != nil && m.UseAllTxPortsPerProbe != nil {
		return *m.UseAllTxPortsPerProbe
	}
	return Default_ProbeConf_UseAllTxPortsPerProbe
}

func init() {
	proto.RegisterType((*ProbeConf)(nil), "cloudprober.probes.udp.ProbeConf")
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/probes/udp/proto/config.proto", fileDescriptor_c34d5b2886f1258a)
}

var fileDescriptor_c34d5b2886f1258a = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcb, 0x4b, 0xc3, 0x30,
	0x1c, 0xc7, 0xd9, 0x6c, 0x75, 0x0d, 0x9e, 0x22, 0x8e, 0x28, 0x08, 0x43, 0x3d, 0xec, 0xd4, 0xae,
	0x1b, 0x78, 0xa8, 0x17, 0x1f, 0x57, 0x85, 0x52, 0xc4, 0x6b, 0xe8, 0x23, 0xed, 0x02, 0x79, 0x91,
	0x87, 0x74, 0xff, 0x84, 0x7f, 0xb3, 0x24, 0x95, 0xb1, 0x53, 0xf2, 0xfd, 0xf0, 0x09, 0xbf, 0x6f,
	0x7e, 0xe0, 0x79, 0xa0, 0x76, 0xef, 0x9a, 0xb4, 0x95, 0x3c, 0x1b, 0xa4, 0x1c, 0x18, 0xc9, 0x5a,
	0x26, 0x5d, 0xa7, 0xb4, 0x6c, 0x88, 0xce, 0xc2, 0x61, 0x32, 0xd7, 0x29, 0x7f, 0xb5, 0x32, 0x6b,
	0xa5, 0xe8, 0xe9, 0x90, 0x86, 0x00, 0x97, 0x27, 0x6a, 0x3a, 0xa9, 0xa9, 0xeb, 0xd4, 0xfd, 0xef,
	0x1c, 0x24, 0xa5, 0x8f, 0xef, 0x52, 0xf4, 0xf0, 0x06, 0x44, 0x4a, 0x6a, 0x8b, 0xce, 0x56, 0xb3,
	0x75, 0x5c, 0xc4, 0xbb, 0x3c, 0xdf, 0x6e, 0xab, 0x80, 0xe0, 0x23, 0xb8, 0x14, 0x8e, 0x63, 0x3b,
	0x62, 0x1f, 0x0d, 0x8a, 0x82, 0x32, 0xcf, 0x9f, 0x2a, 0x20, 0x1c, 0xff, 0x1a, 0x4b, 0x4f, 0xe1,
	0x03, 0x00, 0xbc, 0x1e, 0x31, 0x23, 0x62, 0xb0, 0x7b, 0x14, 0x07, 0x27, 0xca, 0x77, 0x9b, 0x4d,
	0x95, 0xf0, 0x7a, 0xfc, 0x08, 0x18, 0xde, 0x01, 0x40, 0x15, 0xfe, 0x21, 0xda, 0x50, 0x29, 0xd0,
	0xb9, 0x97, 0xaa, 0x84, 0xaa, 0xef, 0x09, 0xc0, 0x02, 0x2c, 0xc9, 0xe8, 0x87, 0x60, 0x4e, 0xac,
	0xa6, 0xad, 0xc1, 0xcd, 0x21, 0x0c, 0x45, 0x17, 0xab, 0xd9, 0x7a, 0x51, 0xc4, 0x7d, 0xcd, 0x0c,
	0xa9, 0xae, 0x26, 0xe9, 0x73, 0x72, 0xde, 0x0e, 0xbe, 0x00, 0x7c, 0x01, 0xb7, 0xce, 0x10, 0x5c,
	0x33, 0x76, 0x6c, 0x8a, 0x15, 0xd1, 0x38, 0xfc, 0x18, 0x2d, 0x4e, 0xdf, 0x5f, 0x3b, 0x43, 0x5e,
	0x19, 0xfb, 0x6f, 0x5e, 0x12, 0x1d, 0xd6, 0xf0, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xc2, 0x40,
	0x2e, 0x66, 0x01, 0x00, 0x00,
}
