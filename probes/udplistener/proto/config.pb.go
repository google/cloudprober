// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/probes/udplistener/proto/config.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	github.com/google/cloudprober/probes/udplistener/proto/config.proto

It has these top-level messages:
	ProbeConf
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Probe response to an incoming packet: echo back or discard.
type ProbeConf_Type int32

const (
	ProbeConf_INVALID ProbeConf_Type = 0
	ProbeConf_ECHO    ProbeConf_Type = 1
	ProbeConf_DISCARD ProbeConf_Type = 2
)

var ProbeConf_Type_name = map[int32]string{
	0: "INVALID",
	1: "ECHO",
	2: "DISCARD",
}
var ProbeConf_Type_value = map[string]int32{
	"INVALID": 0,
	"ECHO":    1,
	"DISCARD": 2,
}

func (x ProbeConf_Type) Enum() *ProbeConf_Type {
	p := new(ProbeConf_Type)
	*p = x
	return p
}
func (x ProbeConf_Type) String() string {
	return proto1.EnumName(ProbeConf_Type_name, int32(x))
}
func (x *ProbeConf_Type) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(ProbeConf_Type_value, data, "ProbeConf_Type")
	if err != nil {
		return err
	}
	*x = ProbeConf_Type(value)
	return nil
}
func (ProbeConf_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ProbeConf struct {
	// Export stats after these many milliseconds
	StatsExportIntervalMsec *int32 `protobuf:"varint,2,opt,name=stats_export_interval_msec,json=statsExportIntervalMsec,def=10000" json:"stats_export_interval_msec,omitempty"`
	// Port to listen.
	Port             *int32          `protobuf:"varint,3,opt,name=port,def=32212" json:"port,omitempty"`
	Type             *ProbeConf_Type `protobuf:"varint,4,opt,name=type,enum=cloudprober.probes.udplistener.ProbeConf_Type" json:"type,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ProbeConf) Reset()                    { *m = ProbeConf{} }
func (m *ProbeConf) String() string            { return proto1.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()               {}
func (*ProbeConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_ProbeConf_StatsExportIntervalMsec int32 = 10000
const Default_ProbeConf_Port int32 = 32212

func (m *ProbeConf) GetStatsExportIntervalMsec() int32 {
	if m != nil && m.StatsExportIntervalMsec != nil {
		return *m.StatsExportIntervalMsec
	}
	return Default_ProbeConf_StatsExportIntervalMsec
}

func (m *ProbeConf) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_ProbeConf_Port
}

func (m *ProbeConf) GetType() ProbeConf_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ProbeConf_INVALID
}

func init() {
	proto1.RegisterType((*ProbeConf)(nil), "cloudprober.probes.udplistener.ProbeConf")
	proto1.RegisterEnum("cloudprober.probes.udplistener.ProbeConf_Type", ProbeConf_Type_name, ProbeConf_Type_value)
}

func init() {
	proto1.RegisterFile("github.com/google/cloudprober/probes/udplistener/proto/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8e, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0x47, 0x4d, 0xdd, 0xa2, 0xae, 0x20, 0x61, 0x2f, 0x46, 0x0f, 0x52, 0x7a, 0x2a, 0x1e, 0x76,
	0xd3, 0x78, 0xf3, 0xd6, 0x26, 0x05, 0x03, 0xfe, 0x23, 0x8a, 0xd7, 0xd0, 0x6e, 0xa7, 0x31, 0x90,
	0x66, 0x96, 0xec, 0x44, 0xec, 0x57, 0xf5, 0xd3, 0x48, 0x36, 0x22, 0x3d, 0xf5, 0x34, 0xcc, 0xe3,
	0x3d, 0xf8, 0xf1, 0xb8, 0x28, 0xe9, 0xb3, 0x5d, 0x49, 0x8d, 0x5b, 0x55, 0x20, 0x16, 0x15, 0x28,
	0x5d, 0x61, 0xbb, 0x36, 0x0d, 0xae, 0xa0, 0x51, 0xee, 0x58, 0xd5, 0xae, 0x4d, 0x55, 0x5a, 0x82,
	0xba, 0x47, 0x84, 0x4a, 0x63, 0xbd, 0x29, 0x0b, 0xe9, 0x1e, 0x71, 0xb3, 0x97, 0xc8, 0x3e, 0x91,
	0x7b, 0xc9, 0xf8, 0xc7, 0xe3, 0x67, 0xaf, 0x1d, 0x8e, 0xb1, 0xde, 0x88, 0x39, 0xbf, 0xb6, 0xb4,
	0x24, 0x9b, 0xc3, 0xb7, 0xc1, 0x86, 0xf2, 0xb2, 0x26, 0x68, 0xbe, 0x96, 0x55, 0xbe, 0xb5, 0xa0,
	0x83, 0xc1, 0xc8, 0x9b, 0x0c, 0xef, 0x87, 0xd3, 0x30, 0x0c, 0xc3, 0xec, 0xd2, 0x89, 0x0b, 0xe7,
	0xa5, 0x7f, 0xda, 0x93, 0x05, 0x2d, 0xae, 0x38, 0xeb, 0x58, 0x70, 0xdc, 0xdb, 0x77, 0x51, 0x34,
	0x8d, 0x32, 0x87, 0xc4, 0x9c, 0x33, 0xda, 0x19, 0x08, 0xd8, 0xc8, 0x9b, 0x5c, 0x44, 0x52, 0x1e,
	0xde, 0x26, 0xff, 0x77, 0xc9, 0xf7, 0x9d, 0x81, 0xcc, 0xb5, 0xe3, 0x5b, 0xce, 0xba, 0x4f, 0x9c,
	0xf3, 0x93, 0xf4, 0xf9, 0x63, 0xf6, 0x98, 0x26, 0xfe, 0x91, 0x38, 0xe5, 0x6c, 0x11, 0x3f, 0xbc,
	0xf8, 0x5e, 0x87, 0x93, 0xf4, 0x2d, 0x9e, 0x65, 0x89, 0x3f, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0x69, 0x13, 0xd9, 0x42, 0x01, 0x00, 0x00,
}
