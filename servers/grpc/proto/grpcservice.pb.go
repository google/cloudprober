// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: github.com/google/cloudprober/servers/grpc/proto/grpcservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EchoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob" json:"blob,omitempty"`
}

func (x *EchoMessage) Reset() {
	*x = EchoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoMessage) ProtoMessage() {}

func (x *EchoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoMessage.ProtoReflect.Descriptor instead.
func (*EchoMessage) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{0}
}

func (x *EchoMessage) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName *string `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{1}
}

func (x *StatusRequest) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UptimeUs *int64 `protobuf:"varint,1,opt,name=uptime_us,json=uptimeUs" json:"uptime_us,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{2}
}

func (x *StatusResponse) GetUptimeUs() int64 {
	if x != nil && x.UptimeUs != nil {
		return *x.UptimeUs
	}
	return 0
}

type BlobReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *int32 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (x *BlobReadRequest) Reset() {
	*x = BlobReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobReadRequest) ProtoMessage() {}

func (x *BlobReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobReadRequest.ProtoReflect.Descriptor instead.
func (*BlobReadRequest) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{3}
}

func (x *BlobReadRequest) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type BlobReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob" json:"blob,omitempty"`
}

func (x *BlobReadResponse) Reset() {
	*x = BlobReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobReadResponse) ProtoMessage() {}

func (x *BlobReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobReadResponse.ProtoReflect.Descriptor instead.
func (*BlobReadResponse) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{4}
}

func (x *BlobReadResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type BlobWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob" json:"blob,omitempty"`
}

func (x *BlobWriteRequest) Reset() {
	*x = BlobWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobWriteRequest) ProtoMessage() {}

func (x *BlobWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobWriteRequest.ProtoReflect.Descriptor instead.
func (*BlobWriteRequest) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{5}
}

func (x *BlobWriteRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type BlobWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *int32 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (x *BlobWriteResponse) Reset() {
	*x = BlobWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobWriteResponse) ProtoMessage() {}

func (x *BlobWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobWriteResponse.ProtoReflect.Descriptor instead.
func (*BlobWriteResponse) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP(), []int{6}
}

func (x *BlobWriteResponse) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

var File_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto protoreflect.FileDescriptor

var file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x22, 0x21,
	0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x22, 0x30, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x22, 0x26, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x27, 0x0a, 0x11, 0x42, 0x6c, 0x6f,
	0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x32, 0x92, 0x03, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescOnce sync.Once
	file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescData = file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDesc
)

func file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescGZIP() []byte {
	file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescOnce.Do(func() {
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescData)
	})
	return file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDescData
}

var file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_goTypes = []interface{}{
	(*EchoMessage)(nil),       // 0: cloudprober.servers.grpc.EchoMessage
	(*StatusRequest)(nil),     // 1: cloudprober.servers.grpc.StatusRequest
	(*StatusResponse)(nil),    // 2: cloudprober.servers.grpc.StatusResponse
	(*BlobReadRequest)(nil),   // 3: cloudprober.servers.grpc.BlobReadRequest
	(*BlobReadResponse)(nil),  // 4: cloudprober.servers.grpc.BlobReadResponse
	(*BlobWriteRequest)(nil),  // 5: cloudprober.servers.grpc.BlobWriteRequest
	(*BlobWriteResponse)(nil), // 6: cloudprober.servers.grpc.BlobWriteResponse
}
var file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_depIdxs = []int32{
	0, // 0: cloudprober.servers.grpc.Prober.Echo:input_type -> cloudprober.servers.grpc.EchoMessage
	3, // 1: cloudprober.servers.grpc.Prober.BlobRead:input_type -> cloudprober.servers.grpc.BlobReadRequest
	1, // 2: cloudprober.servers.grpc.Prober.ServerStatus:input_type -> cloudprober.servers.grpc.StatusRequest
	5, // 3: cloudprober.servers.grpc.Prober.BlobWrite:input_type -> cloudprober.servers.grpc.BlobWriteRequest
	0, // 4: cloudprober.servers.grpc.Prober.Echo:output_type -> cloudprober.servers.grpc.EchoMessage
	4, // 5: cloudprober.servers.grpc.Prober.BlobRead:output_type -> cloudprober.servers.grpc.BlobReadResponse
	2, // 6: cloudprober.servers.grpc.Prober.ServerStatus:output_type -> cloudprober.servers.grpc.StatusResponse
	6, // 7: cloudprober.servers.grpc.Prober.BlobWrite:output_type -> cloudprober.servers.grpc.BlobWriteResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_init() }
func file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_init() {
	if File_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_goTypes,
		DependencyIndexes: file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_depIdxs,
		MessageInfos:      file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_msgTypes,
	}.Build()
	File_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto = out.File
	file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_rawDesc = nil
	file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_goTypes = nil
	file_github_com_google_cloudprober_servers_grpc_proto_grpcservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProberClient is the client API for Prober service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProberClient interface {
	// Echo echoes back incoming messages.
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	// BlobRead returns a blob of bytes to the prober.
	BlobRead(ctx context.Context, in *BlobReadRequest, opts ...grpc.CallOption) (*BlobReadResponse, error)
	// ServerStatus returns the current server status.
	ServerStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// BlobWrite allows client to write a blob to the server.
	BlobWrite(ctx context.Context, in *BlobWriteRequest, opts ...grpc.CallOption) (*BlobWriteResponse, error)
}

type proberClient struct {
	cc grpc.ClientConnInterface
}

func NewProberClient(cc grpc.ClientConnInterface) ProberClient {
	return &proberClient{cc}
}

func (c *proberClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/cloudprober.servers.grpc.Prober/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberClient) BlobRead(ctx context.Context, in *BlobReadRequest, opts ...grpc.CallOption) (*BlobReadResponse, error) {
	out := new(BlobReadResponse)
	err := c.cc.Invoke(ctx, "/cloudprober.servers.grpc.Prober/BlobRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberClient) ServerStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cloudprober.servers.grpc.Prober/ServerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proberClient) BlobWrite(ctx context.Context, in *BlobWriteRequest, opts ...grpc.CallOption) (*BlobWriteResponse, error) {
	out := new(BlobWriteResponse)
	err := c.cc.Invoke(ctx, "/cloudprober.servers.grpc.Prober/BlobWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProberServer is the server API for Prober service.
type ProberServer interface {
	// Echo echoes back incoming messages.
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	// BlobRead returns a blob of bytes to the prober.
	BlobRead(context.Context, *BlobReadRequest) (*BlobReadResponse, error)
	// ServerStatus returns the current server status.
	ServerStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// BlobWrite allows client to write a blob to the server.
	BlobWrite(context.Context, *BlobWriteRequest) (*BlobWriteResponse, error)
}

// UnimplementedProberServer can be embedded to have forward compatible implementations.
type UnimplementedProberServer struct {
}

func (*UnimplementedProberServer) Echo(context.Context, *EchoMessage) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedProberServer) BlobRead(context.Context, *BlobReadRequest) (*BlobReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobRead not implemented")
}
func (*UnimplementedProberServer) ServerStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerStatus not implemented")
}
func (*UnimplementedProberServer) BlobWrite(context.Context, *BlobWriteRequest) (*BlobWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobWrite not implemented")
}

func RegisterProberServer(s *grpc.Server, srv ProberServer) {
	s.RegisterService(&_Prober_serviceDesc, srv)
}

func _Prober_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudprober.servers.grpc.Prober/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prober_BlobRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServer).BlobRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudprober.servers.grpc.Prober/BlobRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServer).BlobRead(ctx, req.(*BlobReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prober_ServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServer).ServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudprober.servers.grpc.Prober/ServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServer).ServerStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prober_BlobWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProberServer).BlobWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudprober.servers.grpc.Prober/BlobWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProberServer).BlobWrite(ctx, req.(*BlobWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Prober_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloudprober.servers.grpc.Prober",
	HandlerType: (*ProberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Prober_Echo_Handler,
		},
		{
			MethodName: "BlobRead",
			Handler:    _Prober_BlobRead_Handler,
		},
		{
			MethodName: "ServerStatus",
			Handler:    _Prober_ServerStatus_Handler,
		},
		{
			MethodName: "BlobWrite",
			Handler:    _Prober_BlobWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/google/cloudprober/servers/grpc/proto/grpcservice.proto",
}
