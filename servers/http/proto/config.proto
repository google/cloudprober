// Copyright 2017-2019 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package cloudprober.servers.http;

option go_package = "github.com/google/cloudprober/servers/http/proto";

// Next available tag = 10
message ServerConf {
  optional int32 port = 1 [default = 3141];

  // tls_cert_file and tls_key_file field should be set for HTTPS.
  enum ProtocolType {
    HTTP = 0;
    HTTPS = 1;
  }
  optional ProtocolType protocol = 6 [default = HTTP];

  // Maximum duration for reading the entire request, including the body.
  optional int32 read_timeout_ms = 2 [default = 10000];  // default: 10s

  // Maximum duration before timing out writes of the response.
  optional int32 write_timeout_ms = 3 [default = 10000];  // default: 10s

  // Maximum amount of time to wait for the next request when keep-alives are
  // enabled.
  optional int32 idle_timeout_ms = 4 [default = 60000];  // default: 1m

  // Certificate file to use for HTTPS servers.
  optional string tls_cert_file = 7;

  // Private key file corresponding to the certificate above.
  optional string tls_key_file = 8;

  // Disable HTTP/2 for HTTPS servers.
  optional bool disable_http2 = 9;

  message PatternDataHandler {
    // Response sizes to server, e.g. 1024.
    required int32 response_size = 1;
    // Pattern is repeated to build the response, with "response_size mod
    // pattern_size" filled by '0' bytes.
    optional string pattern = 2 [default = "cloudprober"];
  }
  // Pattern data handler returns pattern data at the url /data_<size_in_bytes>,
  // e.g. "/data_2048".
  repeated PatternDataHandler pattern_data_handler = 5;
}
