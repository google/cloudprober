// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/surfacers/stackdriver/proto/config.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SurfacerConf struct {
	// GCP project name for stackdriver. If not specified and running on GCP,
	// project is used.
	Project *string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// How often to export metrics to stackdriver.
	BatchTimerSec *uint64 `protobuf:"varint,2,opt,name=batch_timer_sec,json=batchTimerSec,def=10" json:"batch_timer_sec,omitempty"`
	// If allowed_metrics_regex is specified, only metrics matching the given
	// regular expression will be exported to stackdriver. Since probe type and
	// probe name are part of the metric name, you can use this field to restrict
	// stackdriver metrics to a particular probe.
	// Example:
	// allowed_metrics_regex: ".*(http|ping).*(success|validation_failure).*"
	AllowedMetricsRegex *string `protobuf:"bytes,3,opt,name=allowed_metrics_regex,json=allowedMetricsRegex" json:"allowed_metrics_regex,omitempty"`
	// Monitoring URL base. Full metric URL looks like the following:
	// <monitoring_url>/<ptype>/<probe>/<metric>
	// Example:
	// custom.googleapis.com/cloudprober/http/google-homepage/latency
	MonitoringUrl        *string  `protobuf:"bytes,4,opt,name=monitoring_url,json=monitoringUrl,def=custom.googleapis.com/cloudprober/" json:"monitoring_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SurfacerConf) Reset()         { *m = SurfacerConf{} }
func (m *SurfacerConf) String() string { return proto.CompactTextString(m) }
func (*SurfacerConf) ProtoMessage()    {}
func (*SurfacerConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_447dc81d4918bb00, []int{0}
}

func (m *SurfacerConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurfacerConf.Unmarshal(m, b)
}
func (m *SurfacerConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurfacerConf.Marshal(b, m, deterministic)
}
func (m *SurfacerConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurfacerConf.Merge(m, src)
}
func (m *SurfacerConf) XXX_Size() int {
	return xxx_messageInfo_SurfacerConf.Size(m)
}
func (m *SurfacerConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SurfacerConf.DiscardUnknown(m)
}

var xxx_messageInfo_SurfacerConf proto.InternalMessageInfo

const Default_SurfacerConf_BatchTimerSec uint64 = 10
const Default_SurfacerConf_MonitoringUrl string = "custom.googleapis.com/cloudprober/"

func (m *SurfacerConf) GetProject() string {
	if m != nil && m.Project != nil {
		return *m.Project
	}
	return ""
}

func (m *SurfacerConf) GetBatchTimerSec() uint64 {
	if m != nil && m.BatchTimerSec != nil {
		return *m.BatchTimerSec
	}
	return Default_SurfacerConf_BatchTimerSec
}

func (m *SurfacerConf) GetAllowedMetricsRegex() string {
	if m != nil && m.AllowedMetricsRegex != nil {
		return *m.AllowedMetricsRegex
	}
	return ""
}

func (m *SurfacerConf) GetMonitoringUrl() string {
	if m != nil && m.MonitoringUrl != nil {
		return *m.MonitoringUrl
	}
	return Default_SurfacerConf_MonitoringUrl
}

func init() {
	proto.RegisterType((*SurfacerConf)(nil), "cloudprober.surfacer.stackdriver.SurfacerConf")
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/surfacers/stackdriver/proto/config.proto", fileDescriptor_447dc81d4918bb00)
}

var fileDescriptor_447dc81d4918bb00 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x46, 0x49, 0x2d, 0x88, 0x8b, 0x55, 0x88, 0x08, 0x39, 0x86, 0x9e, 0x8a, 0x87, 0xac, 0x7a,
	0xec, 0x55, 0x10, 0x3c, 0x78, 0x49, 0xf5, 0xbc, 0x6c, 0x26, 0x93, 0xed, 0xea, 0x6e, 0x26, 0xcc,
	0xee, 0xaa, 0xff, 0xd3, 0x3f, 0x24, 0x49, 0x5b, 0xcc, 0xf1, 0xe3, 0xcd, 0x9b, 0xc3, 0x13, 0xcf,
	0xc6, 0xc6, 0x7d, 0x6a, 0x2a, 0x20, 0x2f, 0x0d, 0x91, 0x71, 0x28, 0xc1, 0x51, 0x6a, 0x07, 0xa6,
	0x06, 0x59, 0x86, 0xc4, 0x9d, 0x06, 0xe4, 0x20, 0x43, 0xd4, 0xf0, 0xd9, 0xb2, 0xfd, 0x42, 0x96,
	0x03, 0x53, 0x24, 0x09, 0xd4, 0x77, 0xd6, 0x54, 0xd3, 0xc8, 0xcb, 0x99, 0x55, 0x9d, 0xac, 0x6a,
	0x26, 0xad, 0x7f, 0x33, 0x71, 0xb9, 0x3b, 0x82, 0x27, 0xea, 0xbb, 0xbc, 0x10, 0xe7, 0x03, 0xd3,
	0x07, 0x42, 0x2c, 0xb2, 0x32, 0xdb, 0x5c, 0xd4, 0xa7, 0x99, 0xdf, 0x89, 0xeb, 0x46, 0x47, 0xd8,
	0xab, 0x68, 0x3d, 0xb2, 0x0a, 0x08, 0xc5, 0xa2, 0xcc, 0x36, 0xcb, 0xed, 0xe2, 0xe1, 0xbe, 0x5e,
	0x4d, 0xe8, 0x6d, 0x24, 0x3b, 0x84, 0xfc, 0x51, 0xdc, 0x6a, 0xe7, 0xe8, 0x1b, 0x5b, 0xe5, 0x31,
	0xb2, 0x85, 0xa0, 0x18, 0x0d, 0xfe, 0x14, 0x67, 0xd3, 0xcf, 0x9b, 0x23, 0x7c, 0x3d, 0xb0, 0x7a,
	0x44, 0xf9, 0x8b, 0xb8, 0xf2, 0xd4, 0xdb, 0x48, 0x6c, 0x7b, 0xa3, 0x12, 0xbb, 0x62, 0x39, 0x1e,
	0x6f, 0xd7, 0x90, 0x42, 0x24, 0x5f, 0x1d, 0x42, 0xe8, 0xc1, 0x86, 0xa9, 0xcb, 0x3c, 0x48, 0xbd,
	0xfa, 0x37, 0xdf, 0xd9, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xc2, 0xc0, 0x3f, 0x40, 0x01,
	0x00, 0x00,
}
