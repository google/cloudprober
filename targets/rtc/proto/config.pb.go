// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/targets/rtc/proto/config.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	github.com/google/cloudprober/targets/rtc/proto/config.proto

It has these top-level messages:
	TargetsConf
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// TargetsConf represents listing targets from a key/val set stored in the RTC
// API under a certain provided configuration. It always only lists the keys
// (hostnames) and provides a resolver which will resolve to a single tag. This
// can be used as a kind of drop-in replacement for GCE Instances when that
// would not be possible. For example, one could set "resolve_tag" to "ip", and
// this lister will now list all VM names, with a resolver that resolves those
// names to their ip addresses.
//
// For more information on RTC see
// https://cloud.google.com/deployment-manager/runtime-configurator/reference/rest/
//
// It is assumed that this is being curated, and indeed can be controlled with
// settings in a cloudprober configuration.  See
// cloudprober/config/config.proto.
type TargetsConf struct {
	// Config-name to list hosts from.
	Cfg *string `protobuf:"bytes,1,opt,name=cfg" json:"cfg,omitempty"`
	// Expiration time in ms for RTC variables. Variables older will be ignored.
	ExpireMsec *int32 `protobuf:"varint,2,opt,name=expire_msec,json=expireMsec,def=30000" json:"expire_msec,omitempty"`
	// Which address tag to resolve a hostname to. Hosts report multiple addresses
	// for themselves, each with a "tag" (like "PUBLIC_IP" or "PRIVATE_IP"). For
	// more information, see the "tag" field of the RtcTargetInfo.Address message.
	ResolveTag *string `protobuf:"bytes,3,opt,name=resolve_tag,json=resolveTag" json:"resolve_tag,omitempty"`
	// groups is a list of groups that should be included by the lister. Hosts can
	// assign themselves a set "groups" such as "Zone1" or "HasMultiNIC". If this
	// field is set, then we will filter out hosts that don't have a group that
	// matches any groups listed here. If groups is not set, no filtering will
	// occure.
	//
	// For more information, see the "groups" field of the RtcTargetInfo message.
	//
	// Example :
	//   Host1 has group "G1" and "G2"
	//   Host2 has groups "G2" and "G3"
	//   Host3 has no groups.
	//   The following table shows values for groups and which hosts will be
	//   listed.
	//   groups      | Listed Hosts
	//   ------------|--------------------
	//   ["G1"]      | Host1
	//   ["G2"]      | Host1, Host2
	//   ["G1","G3"] | Host1, Host2
	//   ["G4"]      | None
	//   []          | Host1, Host2, Host3
	Groups []string `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// How often targets should be evaluated. Any number less than or equal to 0
	// will result in no target caching (targets will be reevaluated on demand).
	ReEvalSec        *int32 `protobuf:"varint,6,opt,name=re_eval_sec,json=reEvalSec,def=0" json:"re_eval_sec,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TargetsConf) Reset()                    { *m = TargetsConf{} }
func (m *TargetsConf) String() string            { return proto1.CompactTextString(m) }
func (*TargetsConf) ProtoMessage()               {}
func (*TargetsConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_TargetsConf_ExpireMsec int32 = 30000
const Default_TargetsConf_ReEvalSec int32 = 0

func (m *TargetsConf) GetCfg() string {
	if m != nil && m.Cfg != nil {
		return *m.Cfg
	}
	return ""
}

func (m *TargetsConf) GetExpireMsec() int32 {
	if m != nil && m.ExpireMsec != nil {
		return *m.ExpireMsec
	}
	return Default_TargetsConf_ExpireMsec
}

func (m *TargetsConf) GetResolveTag() string {
	if m != nil && m.ResolveTag != nil {
		return *m.ResolveTag
	}
	return ""
}

func (m *TargetsConf) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *TargetsConf) GetReEvalSec() int32 {
	if m != nil && m.ReEvalSec != nil {
		return *m.ReEvalSec
	}
	return Default_TargetsConf_ReEvalSec
}

func init() {
	proto1.RegisterType((*TargetsConf)(nil), "cloudprober.targets.rtc.TargetsConf")
}

func init() {
	proto1.RegisterFile("github.com/google/cloudprober/targets/rtc/proto/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8d, 0xb1, 0x4e, 0xc4, 0x30,
	0x0c, 0x86, 0x15, 0xca, 0x9d, 0xd4, 0x74, 0x41, 0x19, 0xa0, 0x1b, 0x85, 0x01, 0x75, 0x6a, 0x22,
	0xb1, 0x21, 0x36, 0xc4, 0xc8, 0x52, 0x6e, 0xaf, 0x72, 0xc6, 0x35, 0x95, 0x72, 0xe7, 0xca, 0x49,
	0x2b, 0xde, 0x87, 0x17, 0x45, 0xed, 0x75, 0x60, 0xf3, 0x67, 0xff, 0xfe, 0x3f, 0xfd, 0x4a, 0x43,
	0xfa, 0x9e, 0x8e, 0x0d, 0xf0, 0xc9, 0x12, 0x33, 0x05, 0xb4, 0x10, 0x78, 0xfa, 0x1a, 0x85, 0x8f,
	0x28, 0x36, 0x79, 0x21, 0x4c, 0xd1, 0x4a, 0x02, 0x3b, 0x0a, 0x27, 0xb6, 0xc0, 0xe7, 0x7e, 0xa0,
	0x66, 0x05, 0x73, 0xf7, 0x2f, 0xdb, 0x6c, 0xd9, 0x46, 0x12, 0x3c, 0xfe, 0x2a, 0x5d, 0x1c, 0x2e,
	0xfc, 0xc6, 0xe7, 0xde, 0xdc, 0xe8, 0x0c, 0x7a, 0x2a, 0x55, 0xa5, 0xea, 0xbc, 0x5d, 0x46, 0xf3,
	0xa4, 0x0b, 0xfc, 0x19, 0x07, 0xc1, 0xee, 0x14, 0x11, 0xca, 0xab, 0x4a, 0xd5, 0xbb, 0x97, 0xdd,
	0xb3, 0x73, 0xce, 0xb5, 0xfa, 0x72, 0xf9, 0x88, 0x08, 0xe6, 0x5e, 0x17, 0x82, 0x91, 0xc3, 0x8c,
	0x5d, 0xf2, 0x54, 0x66, 0x6b, 0x83, 0xde, 0x56, 0x07, 0x4f, 0xe6, 0x56, 0xef, 0x49, 0x78, 0x1a,
	0x63, 0x79, 0x5d, 0x65, 0x75, 0xde, 0x6e, 0x64, 0x1e, 0x96, 0xc7, 0x0e, 0x67, 0x1f, 0xba, 0x45,
	0xb0, 0x5f, 0x05, 0xca, 0xb5, 0xb9, 0xe0, 0xfb, 0xec, 0xc3, 0x27, 0xc2, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8c, 0xb8, 0xb7, 0x5d, 0xfd, 0x00, 0x00, 0x00,
}
