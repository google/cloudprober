// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: github.com/google/cloudprober/targets/rtc/rtcreporter/proto/rtcreporter.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RtcReportOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RTC configs which cloudprober should report itself to.
	Cfgs []string `protobuf:"bytes,1,rep,name=cfgs" json:"cfgs,omitempty"`
	// RTC rate at which cloudprober should report itself.
	IntervalMsec *int32 `protobuf:"varint,2,opt,name=interval_msec,json=intervalMsec,def=10000" json:"interval_msec,omitempty"`
	// Which system variables should be reported. For more information see
	// cloudprober/util. The sysVars dictionary contains variable names mapped to
	// their values. variables should be a list of the variable names that should
	// be reported (such as public/private ips).
	Variables []string `protobuf:"bytes,3,rep,name=variables" json:"variables,omitempty"`
	// Which groups this instance is a member of. See RtcTargetInfo.group for
	// more info.
	Groups []string `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
}

// Default values for RtcReportOptions fields.
const (
	Default_RtcReportOptions_IntervalMsec = int32(10000)
)

func (x *RtcReportOptions) Reset() {
	*x = RtcReportOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtcReportOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcReportOptions) ProtoMessage() {}

func (x *RtcReportOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcReportOptions.ProtoReflect.Descriptor instead.
func (*RtcReportOptions) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescGZIP(), []int{0}
}

func (x *RtcReportOptions) GetCfgs() []string {
	if x != nil {
		return x.Cfgs
	}
	return nil
}

func (x *RtcReportOptions) GetIntervalMsec() int32 {
	if x != nil && x.IntervalMsec != nil {
		return *x.IntervalMsec
	}
	return Default_RtcReportOptions_IntervalMsec
}

func (x *RtcReportOptions) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RtcReportOptions) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

// RtcTargetInfo is used by RTC targets. Hosts report all the ways they may be
// addressed to an RTC configuration, which will later be used as target
// information.
// The rtcreporter package is responsible for creating and sending these
// protobufs, while the rtc targets type of the targets package will receive
// these protobufs.
type RtcTargetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of host. Also used as variable name in the RTC config.
	InstanceName *string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	// List of tags this host belongs to, in order to filter out groups of related
	// hosts. For instance, maybe an rtc lister will only include instances that
	// have the group tag "DMZ_1". Instances may belong to multiple groups.
	Groups []string `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	// List of all ways this host can be addressed (such as public / private ip).
	Addresses []*RtcTargetInfo_Address `protobuf:"bytes,3,rep,name=addresses" json:"addresses,omitempty"`
}

func (x *RtcTargetInfo) Reset() {
	*x = RtcTargetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtcTargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcTargetInfo) ProtoMessage() {}

func (x *RtcTargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcTargetInfo.ProtoReflect.Descriptor instead.
func (*RtcTargetInfo) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescGZIP(), []int{1}
}

func (x *RtcTargetInfo) GetInstanceName() string {
	if x != nil && x.InstanceName != nil {
		return *x.InstanceName
	}
	return ""
}

func (x *RtcTargetInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RtcTargetInfo) GetAddresses() []*RtcTargetInfo_Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type RtcTargetInfo_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "Name" of this address. An rtc lister may only include, for instance,
	// public ip addresses. It will filter out all Addresses that do not have
	// "PUBLIC_IP" as their tag.
	Tag *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	// Address contents.
	Address *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (x *RtcTargetInfo_Address) Reset() {
	*x = RtcTargetInfo_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtcTargetInfo_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcTargetInfo_Address) ProtoMessage() {}

func (x *RtcTargetInfo_Address) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcTargetInfo_Address.ProtoReflect.Descriptor instead.
func (*RtcTargetInfo_Address) Descriptor() ([]byte, []int) {
	return file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RtcTargetInfo_Address) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *RtcTargetInfo_Address) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

var File_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto protoreflect.FileDescriptor

var file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x72, 0x74, 0x63, 0x2f, 0x72, 0x74, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x74,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x2e, 0x72, 0x74, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x22, 0x88, 0x01, 0x0a, 0x10, 0x52, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x66, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x66, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x0d,
	0x52, 0x74, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x2e, 0x72, 0x74, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x74, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x1a, 0x35, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x2f, 0x72, 0x74, 0x63, 0x2f, 0x72, 0x74, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescOnce sync.Once
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescData = file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDesc
)

func file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescGZIP() []byte {
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescOnce.Do(func() {
		file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescData)
	})
	return file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDescData
}

var file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_goTypes = []interface{}{
	(*RtcReportOptions)(nil),      // 0: cloudprober.targets.rtcreporter.RtcReportOptions
	(*RtcTargetInfo)(nil),         // 1: cloudprober.targets.rtcreporter.RtcTargetInfo
	(*RtcTargetInfo_Address)(nil), // 2: cloudprober.targets.rtcreporter.RtcTargetInfo.Address
}
var file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_depIdxs = []int32{
	2, // 0: cloudprober.targets.rtcreporter.RtcTargetInfo.addresses:type_name -> cloudprober.targets.rtcreporter.RtcTargetInfo.Address
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_init()
}
func file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_init() {
	if File_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtcReportOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtcTargetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtcTargetInfo_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_goTypes,
		DependencyIndexes: file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_depIdxs,
		MessageInfos:      file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_msgTypes,
	}.Build()
	File_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto = out.File
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_rawDesc = nil
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_goTypes = nil
	file_github_com_google_cloudprober_targets_rtc_rtcreporter_proto_rtcreporter_proto_depIdxs = nil
}
